{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "connections_azuretables_name": {
      "defaultValue": "azuretables",
      "type": "String"
    },
    "subscription_id": {
      "defaultValue": "",
      "type": "String"
    },
    "workflows_LoggingAlertsTeamsMessage_name": {
      "defaultValue": "DeployTeamsMessage",
      "type": "String"
    },
    "storageAccounts_azurealertsteamsmessage_name": {
      "defaultValue": "deployteamsmessage",
      "type": "String"
    },
    "connections_teams_externalid": {
      "defaultValue": "",
      "type": "String"
    },
    "metions": {
      "defaultValue": "voorbeeld@winvision.nl",
      "type": "String"
    }
  },
  "variables": {},
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-09-01",
      "name": "[parameters('storageAccounts_azurealertsteamsmessage_name')]",
      "location": "westeurope",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "defaultToOAuthAuthentication": false,
        "allowCrossTenantReplication": true,
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "allowSharedKeyAccess": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "requireInfrastructureEncryption": false,
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "[parameters('workflows_LoggingAlertsTeamsMessage_name')]",
      "location": "westeurope",
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', parameters('connections_azuretables_name'))]"
      ],
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "staticResults": {
            "Get_an_@mention_token_for_a_user0": {
              "status": "Succeeded",
              "outputs": {
                "headers": {},
                "statusCode": "OK"
              }
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {
                  "properties": {
                    "body": {
                      "properties": {
                        "data": {
                          "properties": {
                            "alertContext": {
                              "properties": {
                                "condition": {
                                  "properties": {
                                    "allOf": {
                                      "items": {
                                        "properties": {
                                          "dimensions": {
                                            "type": "array"
                                          },
                                          "failingPeriods": {
                                            "properties": {
                                              "minFailingPeriodsToAlert": {
                                                "type": "integer"
                                              },
                                              "numberOfEvaluationPeriods": {
                                                "type": "integer"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "linkToFilteredSearchResultsAPI": {
                                            "type": "string"
                                          },
                                          "linkToFilteredSearchResultsUI": {
                                            "type": "string"
                                          },
                                          "linkToSearchResultsAPI": {
                                            "type": "string"
                                          },
                                          "linkToSearchResultsUI": {
                                            "type": "string"
                                          },
                                          "metricMeasureColumn": {},
                                          "metricValue": {
                                            "type": "integer"
                                          },
                                          "operator": {
                                            "type": "string"
                                          },
                                          "searchQuery": {
                                            "type": "string"
                                          },
                                          "targetResourceTypes": {},
                                          "threshold": {
                                            "type": "string"
                                          },
                                          "timeAggregation": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "searchQuery",
                                          "metricMeasureColumn",
                                          "targetResourceTypes",
                                          "operator",
                                          "threshold",
                                          "timeAggregation",
                                          "dimensions",
                                          "metricValue",
                                          "failingPeriods",
                                          "linkToSearchResultsUI",
                                          "linkToFilteredSearchResultsUI",
                                          "linkToSearchResultsAPI",
                                          "linkToFilteredSearchResultsAPI"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "windowEndTime": {
                                      "type": "string"
                                    },
                                    "windowSize": {
                                      "type": "string"
                                    },
                                    "windowStartTime": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "conditionType": {
                                  "type": "string"
                                },
                                "properties": {}
                              },
                              "type": "object"
                            },
                            "customProperties": {},
                            "essentials": {
                              "properties": {
                                "alertContextVersion": {
                                  "type": "string"
                                },
                                "alertId": {
                                  "type": "string"
                                },
                                "alertRule": {
                                  "type": "string"
                                },
                                "alertTargetIDs": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "configurationItems": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "description": {
                                  "type": "string"
                                },
                                "essentialsVersion": {
                                  "type": "string"
                                },
                                "firedDateTime": {
                                  "type": "string"
                                },
                                "monitorCondition": {
                                  "type": "string"
                                },
                                "monitoringService": {
                                  "type": "string"
                                },
                                "originAlertId": {
                                  "type": "string"
                                },
                                "severity": {
                                  "type": "string"
                                },
                                "signalType": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "schemaId": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "headers": {
                      "properties": {
                        "Connection": {
                          "type": "string"
                        },
                        "Content-Length": {
                          "type": "string"
                        },
                        "Content-Type": {
                          "type": "string"
                        },
                        "Expect": {
                          "type": "string"
                        },
                        "Host": {
                          "type": "string"
                        },
                        "User-Agent": {
                          "type": "string"
                        },
                        "X-CorrelationContext": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "actions": {
            "Get_an_@mention_token_for_a_user": {
              "runAfter": {
                "Switch": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['teams']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/v1.0/users/@{encodeURIComponent('parameters('connections_azuretables_name')')}"
              },
              "runtimeConfiguration": {
                "staticResult": {
                  "staticResultOptions": "Disabled",
                  "name": "Get_an_@mention_token_for_a_user0"
                }
              }
            },
            "Initialize_AlertBorderColor": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "AlertBorderColor",
                    "type": "string",
                    "value": "#F5F5F5"
                  }
                ]
              }
            },
            "Switch": {
              "runAfter": {
                "Initialize_AlertBorderColor": [
                  "Succeeded"
                ]
              },
              "cases": {
                "Case": {
                  "case": "Sev0",
                  "actions": {
                    "Set_variable": {
                      "runAfter": {},
                      "type": "SetVariable",
                      "inputs": {
                        "name": "AlertBorderColor",
                        "value": "#EA1325"
                      }
                    }
                  }
                },
                "Case_2": {
                  "case": "Sev1",
                  "actions": {
                    "Set_variable_3": {
                      "runAfter": {},
                      "type": "SetVariable",
                      "inputs": {
                        "name": "AlertBorderColor",
                        "value": "#DE5900"
                      }
                    }
                  }
                },
                "Case_3": {
                  "case": "Sev2",
                  "actions": {
                    "Set_variable_4": {
                      "runAfter": {},
                      "type": "SetVariable",
                      "inputs": {
                        "name": "AlertBorderColor",
                        "value": "#F6CF18"
                      }
                    }
                  }
                },
                "Case_4": {
                  "case": "Sev3",
                  "actions": {
                    "Set_variable_5": {
                      "runAfter": {},
                      "type": "SetVariable",
                      "inputs": {
                        "name": "AlertBorderColor",
                        "value": "#0072C6"
                      }
                    }
                  }
                }
              },
              "default": {
                "actions": {
                  "Set_variable_2": {
                    "runAfter": {},
                    "type": "SetVariable",
                    "inputs": {
                      "name": "AlertBorderColor",
                      "value": "#F5F5F5"
                    }
                  }
                }
              },
              "expression": "@triggerBody()?['data']?['essentials']?['severity']",
              "type": "Switch"
            },
            "Switch_2": {
              "runAfter": {
                "Get_an_@mention_token_for_a_user": [
                  "Succeeded"
                ]
              },
              "cases": {
                "Case": {
                  "case": "Fired",
                  "actions": {
                    "Insert_Entity": {
                      "runAfter": {
                        "Post_message_in_a_chat_or_channel_2": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "MessageId": "@{body('Post_message_in_a_chat_or_channel_2')?['id']}",
                          "PartitionKey": "TeamsMessage",
                          "RowKey": "@{triggerBody()?['data']?['essentials']?['originAlertId']}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuretables']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "[concat('/Tables/@{encodeURIComponent(''', parameters('workflows_LoggingAlertsTeamsMessage_name'), ''')}/entities')]"
                      }
                    },
                    "Post_message_in_a_chat_or_channel_2": {
                      "runAfter": {},
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "messageBody": "<div style=\"border: 2px solid @{variables('AlertBorderColor')}; padding: 16px 32px; border-radius: 5px\"><div>\n<h2>\n@{triggerBody()?['data']?['essentials']?['alertRule']}</h2>\n<p></p>\n@{body('Get_an_@mention_token_for_a_user')?['atMention']}\n<p>Resourcelink: <a href=\"https://portal.azure.com/#@6380bae5-10b0-4942-a657-b66ab2b072ec/resource@{triggerBody()?['data']?['essentials']?['alertTargetIDs'][0]}/alertsV2\">Azure portal resource</a></p>\n<p><span style=\"white: space\">Severity:&nbsp;</span>@{triggerBody()?['data']?['essentials']?['severity']}</p>\n<p><span style=\"white: space\">Status:&nbsp;</span>@{triggerBody()?['data']?['essentials']?['monitorCondition']}</p>\n<p></p></div></div>",
                          "recipient": {
                            "channelId": "",
                            "groupId": ""
                          }
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['teams']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/beta/teams/conversation/message/poster/@{encodeURIComponent('Flow bot')}/location/@{encodeURIComponent('Channel')}"
                      }
                    }
                  }
                },
                "Case_2": {
                  "case": "Resolved",
                  "actions": {
                    "Delete_Entity": {
                      "runAfter": {
                        "Reply_with_a_message_in_a_channel": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuretables']['connectionId']"
                          }
                        },
                        "method": "delete",
                        "path": "[concat('/Tables/@{encodeURIComponent(''', parameters('workflows_LoggingAlertsTeamsMessage_name'), ''')}/entities/etag(PartitionKey=''@{encodeURIComponent(''TeamsMessage'')}'',RowKey=''@{encodeURIComponent(triggerBody()?[''data'']?[''essentials'']?[''originAlertId''])}'')')]"
                      }
                    },
                    "Get_entity": {
                      "runAfter": {
                        "Set_BorderColorForResolved": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuretables']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "[concat('/Tables/@{encodeURIComponent(''', parameters('workflows_LoggingAlertsTeamsMessage_name'), ''')}/entities(PartitionKey=''@{encodeURIComponent(''TeamsMessage'')}'',RowKey=''@{encodeURIComponent(triggerBody()?[''data'']?[''essentials'']?[''originAlertId''])}'')')]"
                      }
                    },
                    "Reply_with_a_message_in_a_channel": {
                      "runAfter": {
                        "Get_entity": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "messageBody": "<div style=\"border: 2px solid @{variables('AlertBorderColor')}; padding: 16px 32px; border-radius: 5px\"><div>\n<h2>\n@{triggerBody()?['data']?['essentials']?['alertRule']}</h2>\n<p></p>\n@{body('Get_an_@mention_token_for_a_user')?['atMention']}\n<p>Resourcelink: <a href=\"https://portal.azure.com/#@6380bae5-10b0-4942-a657-b66ab2b072ec/resource@{triggerBody()?['data']?['essentials']?['alertTargetIDs'][0]}/alertsV2\">Azure portal resource</a></p>\n<p><span style=\"white: space\">Severity:&nbsp;</span>@{triggerBody()?['data']?['essentials']?['severity']}</p>\n<p><span style=\"white: space\">Status:&nbsp;</span>@{triggerBody()?['data']?['essentials']?['monitorCondition']}</p>\n<p></p></div></div>",
                          "parentMessageId": "@{body('Get_entity')?['MessageId']}",
                          "recipient": {
                            "channelId": "19:6Rw40CznKci4iFLtxz_WILuPD6pWJA80M89VJnYA4uU1@thread.tacv2",
                            "groupId": "b0a24c92-35a5-47d5-ae07-20a21e772476"
                          }
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['teams']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/v1.0/teams/conversation/replyWithMessage/poster/Flow bot/location/@{encodeURIComponent('Channel')}"
                      }
                    },
                    "Set_BorderColorForResolved": {
                      "runAfter": {},
                      "type": "SetVariable",
                      "inputs": {
                        "name": "AlertBorderColor",
                        "value": "#0bf707"
                      }
                    }
                  }
                }
              },
              "default": {
                "actions": {}
              },
              "expression": "@{triggerBody()?['data']?['essentials']?['monitorCondition']}",
              "type": "Switch"
            }
          },
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "azuretables": {
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('connections_azuretables_name'))]",
                "connectionName": "azuretables",
                "id": "[concat(/subscriptions/', parameters('subscription_id') ,'/providers/Microsoft.Web/locations/westeurope/managedApis/azuretables)]"
              },
              "teams": {
                "connectionId": "[parameters('connections_teams_externalid')]",
                "connectionName": "teams",
                "id": "[concat(/subscriptions/', parameters('subscription_id') ,'/providers/Microsoft.Web/locations/westeurope/managedApis/teams)]"
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2021-09-01",
      "name": "[concat(parameters('storageAccounts_azurealertsteamsmessage_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_azurealertsteamsmessage_name'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "allowPermanentDelete": false,
          "enabled": true,
          "days": 7
        },
        "isVersioningEnabled": false,
        "changeFeed": {
          "enabled": false
        },
        "restorePolicy": {
          "enabled": false
        },
        "containerDeleteRetentionPolicy": {
          "enabled": true,
          "days": 7
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/queueServices",
      "apiVersion": "2021-09-01",
      "name": "[concat(parameters('storageAccounts_azurealertsteamsmessage_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_azurealertsteamsmessage_name'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": []
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/tableServices",
      "apiVersion": "2021-09-01",
      "name": "[concat(parameters('storageAccounts_azurealertsteamsmessage_name'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_azurealertsteamsmessage_name'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": []
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[parameters('connections_azuretables_name')]",
      "location": "westeurope",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/StorageAccounts', parameters('storageAccounts_azurealertsteamsmessage_name'))]"
      ],
      "kind": "V1",
      "properties": {
        "displayName": "[concat('https://', parameters('storageAccounts_azurealertsteamsmessage_name'), '.table.core.windows.net/HackathonTeamsMessage')]",
        "statuses": [
          {
            "status": "Connected"
          }
        ],
        "customParameterValues": {},
        "nonSecretParameterValues": {
          "storageaccount": "teamsmessage"
        },
       "api": {
          "name": "[parameters('connections_azuretables_name')]",
          "displayName": "Azure Table Storage",
          "description": "Azure Table storage is a service that stores structured NoSQL data in the cloud, providing a key/attribute store with a schemaless design. Sign into your Storage account to create, update, and query tables and more.",
          "iconUri": "[concat('https://connectoricons-prod.azureedge.net/releases/v1.0.1538/1.0.1538.2619/', parameters('connections_azuretables_name'), '/icon.png')]",
          "brandColor": "#804998",
          "id": "[concat('/subscriptions/', parameters('subscription_id') ,'/providers/Microsoft.Web/locations/westeurope/managedApis/', parameters('connections_azuretables_name'))]",
          "type": "Microsoft.Web/locations/managedApis"
        },
        "testLinks": [
          {
            "requestUri": "[concat('https://management.azure.com:443/subscriptions/', parameters('subscription_id') ,'/resourceGroups/CC-Cloud-And-Data-Engineering/providers/Microsoft.Web/connections/', parameters('connections_azuretables_name'), '/extensions/proxy/Tables?api-version=2016-06-01')]",
            "method": "get"
          }
        ]
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
      "apiVersion": "2021-09-01",
      "name": "[concat(parameters('storageAccounts_azurealertsteamsmessage_name'), '/default/', parameters('storageAccounts_azurealertsteamsmessage_name'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccounts_azurealertsteamsmessage_name'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_azurealertsteamsmessage_name'))]"
      ],
      "properties": {}
    }
  ]
}
